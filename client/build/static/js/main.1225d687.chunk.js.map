{"version":3,"sources":["Chart.js","App.js","serviceWorker.js","index.js"],"names":["Chart","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","elementWidth","elementHeight","margin","top","right","bottom","left","x","d3","range","y","state","data","_this2","setInterval","getData","_this3","fetch","then","res","json","resJson","console","log","newData","map","val","timeStamp","price","domain","setState","refs","xAxis","yAxis","react_default","a","createElement","className","d","line","width","height","transform","concat","path","ref","drawXAxis","drawYAxis","ticks","_this4","Component","App","src_Chart","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2MA4FeA,cAvFd,SAAAA,EAAYC,GAAM,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,IADQ,IAGPQ,EAA+BR,EAA/BQ,aAAcC,EAAiBT,EAAjBS,cAHP,OAIZR,EAAKS,OAAS,CAACC,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IACrDb,EAAKc,EAAIC,MAAeC,MAAM,CAAC,EAAGT,EAAeP,EAAKS,OAAOI,KAAOb,EAAKS,OAAOE,QAChFX,EAAKiB,EAAIF,MAAiBC,MAAM,CAACR,EAAgBR,EAAKS,OAAOC,IAAMV,EAAKS,OAAOG,OAAQ,IACvFZ,EAAKO,aAAeA,EACpBP,EAAKQ,cAAgBA,EAErBR,EAAKkB,MAAQ,CACTC,KAAM,MAXEnB,mFAgBE,IAAAoB,EAAAjB,KACnBkB,YAAY,WACXD,EAAKE,WACH,uCAGM,IAAAC,EAAApB,KACTqB,MAAM,YACLC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GACLC,QAAQC,IAAIF,GACZ,IAAIG,EAAUH,EAAQI,IAAI,SAAAC,GACzB,MAAO,CAACC,UAAWnB,IAAY,wBAAZA,CAAqCkB,EAAIC,WAAYC,MAAOF,EAAIE,SAEpFN,QAAQC,IAAIC,GACZR,EAAKT,EAAEsB,OAAOrB,IAAUgB,EAAS,SAAAE,GAAG,OAAIA,EAAIC,aAC5CX,EAAKN,EAAEmB,OAAO,CAAC,EAAGrB,IAAOgB,EAAS,SAAAE,GAAG,OAAIA,EAAIE,UAC7CZ,EAAKc,SAAS,CACblB,KAAMY,0CAcRhB,IAAUZ,KAAKmC,KAAKxB,GAAGR,KAAKH,KAAKoC,2CAIjCxB,IAAUZ,KAAKmC,KAAKrB,GAAGX,KAAKH,KAAKqC,sCAUjC,OAAQC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OAAOC,EAAG1C,KAAK2C,KAAK3C,KAAKe,MAAMC,yCAIvD,OACCsB,EAAAC,EAAAC,cAAA,OAAKI,MAAO5C,KAAKI,aAAcyC,OAAQ7C,KAAKK,eAElCiC,EAAAC,EAAAC,cAAA,KAAGM,UAAS,aAAAC,OAAe/C,KAAKM,OAAOI,KAA3B,MAAAqC,OAAoC/C,KAAKM,OAAOC,IAAhD,MACHP,KAAKe,MAAMC,KAAOhB,KAAKgD,OAAS,KAErCV,EAAAC,EAAAC,cAAA,KAAGS,IAAI,IAAIR,UAAU,SAASK,UAAS,gBAAAC,OAAkB/C,KAAKK,cAAgBL,KAAKM,OAAOC,IAAMP,KAAKM,OAAOG,OAArE,MAClCT,KAAKe,MAAMC,KAAOhB,KAAKkD,YAAc,MAG1CZ,EAAAC,EAAAC,cAAA,KAAGS,IAAI,IAAIR,UAAU,UAChBzC,KAAKe,MAAMC,KAAOhB,KAAKmD,YAAc,sCArCzD,OAAOvC,IAAcZ,KAAKW,GAAGyC,MAAM,iCAInC,OAAOxC,IAAYZ,KAAKc,GAAGsC,MAAM,gCAWxB,IAAAC,EAAArD,KACT,OAAOY,MACJD,EAAE,SAAC+B,GAAD,OAAOW,EAAK1C,EAAE+B,EAAEX,aAClBjB,EAAE,SAAC4B,GAAD,OAAOW,EAAKvC,EAAE4B,EAAEV,gBA5DHsB,aCULC,mLARX,OACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACgB,EAAD,CAAOpD,aAAc,IAAKC,cAAe,cAJ/BiD,aCSEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/C,KAAK,SAAAgD,GACjCA,EAAaC","file":"static/js/main.1225d687.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as d3 from \"d3\";\n\nclass Chart extends Component {\n\n\tconstructor(props){\n    \tsuper(props);\n\n\t      let {elementWidth, elementHeight} = props;\n\t      this.margin = {top: 30, right: 20, bottom: 30, left: 50};\n\t      this.x = d3.scaleTime().range([0, elementWidth - this.margin.left - this.margin.right]);\n\t      this.y = d3.scaleLinear().range([elementHeight - this.margin.top - this.margin.bottom, 0]);\n\t      this.elementWidth = elementWidth;\n\t      this.elementHeight = elementHeight;\n\n\t      this.state = {\n\t          data: null\n\t      };\n\n\t}\n\n\tcomponentDidMount() {\n\t\tsetInterval(() => {\n\t\t\tthis.getData()\n\t\t}, 3000);\n\t}\n\n\tgetData() {\n\t\tfetch('/getData')\n\t\t.then(res => res.json())\n\t\t.then(resJson => {\n\t\t\tconsole.log(resJson);\n\t\t\tlet newData = resJson.map(val => {\n\t\t\t\treturn {timeStamp: d3.utcParse(\"%Y-%m-%dT%H:%M:%S.%LZ\")(val.timeStamp), price: val.price};\n\t\t\t})\n\t\t\tconsole.log(newData);\n\t\t\tthis.x.domain(d3.extent(newData, val => val.timeStamp));\n\t\t\tthis.y.domain([0, d3.max(newData, val => val.price)]);\n\t\t\tthis.setState({\n\t\t\t\tdata: newData\n\t\t\t});\n\t\t})\n\t}\n\n\tget xAxis(){\n\t\treturn d3.axisBottom(this.x).ticks(5);\n\t}\n\n\tget yAxis(){\n\t\treturn d3.axisLeft(this.y).ticks(5);\n\t}\n\n\tdrawXAxis(){\n\t\td3.select(this.refs.x).call(this.xAxis);\n\t}\n\n\tdrawYAxis(){\n\t\td3.select(this.refs.y).call(this.yAxis);\n\t}\n\n\tget line(){\n\t\treturn d3.line()\n\t\t  .x((d)=> (this.x(d.timeStamp)))\n\t\t  .y((d)=> (this.y(d.price)));\n\t}\n\n\tpath(){\n\t\treturn (<path className=\"line\" d={this.line(this.state.data)}/>);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<svg width={this.elementWidth} height={this.elementHeight}>\n\n\t\t\t          <g transform={`translate(${this.margin.left}, ${this.margin.top})`}>\n\t\t\t                  {this.state.data ? this.path() : null}\n\n\t\t\t              <g ref=\"x\" className=\"x axis\" transform={`translate(0, ${this.elementHeight - this.margin.top - this.margin.bottom})`}>\n\t\t\t                  {this.state.data ? this.drawXAxis() : null}\n\t\t\t              </g>\n\n\t\t\t              <g ref='y' className=\"y axis\">\n\t\t\t                  {this.state.data ? this.drawYAxis() : null}\n\t\t\t              </g>\n\t\t\t              \n\t\t\t          </g>\n\n\t\t\t</svg>\n\t\t);\n\t}\n}\n\nexport default Chart;","import React, { Component } from 'react';\nimport Chart from './Chart';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Chart elementWidth={600} elementHeight={270} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}